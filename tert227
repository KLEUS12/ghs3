Отлично! Тогда вот готовый вариант скрипта под экзекутор (Synapse, Krnl и т.п.) с сохранением позиции и состояния кнопки **TradeLag** в файл.

---

## Как работает скрипт:

* Сохраняет позицию окна и состояние кнопки в файл `TradeLockConfig.txt` (формат Lua table).
* Загружает эти данные при запуске.
* Перетаскивание меню только за шапку.
* Анимация открытия/закрытия.
* Вся GUI логика работает на клиенте через `game.Players.LocalPlayer.PlayerGui`.

---

```lua
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")

local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

-- ===== Работа с файлами =====
local configFileName = "TradeLockConfig.txt"

local function fileExists(name)
    local f = isfile and isfile(name)
    return f
end

local function readConfig()
    if fileExists and fileExists(configFileName) then
        local content = readfile(configFileName)
        local success, data = pcall(function()
            return loadstring("return "..content)()
        end)
        if success and type(data) == "table" then
            return data
        end
    end
    return nil
end

local function writeConfig(data)
    if writefile then
        local encoded = "return "..game:GetService("HttpService"):JSONEncode(data)
        -- Немного заменим JSON на Lua синтаксис (уберём кавычки с ключей)
        encoded = encoded:gsub('"(%w+)":', "%1 =")
        writefile(configFileName, encoded)
    end
end

-- ===== Создание GUI =====
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "LoadingMenu"
ScreenGui.Parent = playerGui

local Frame = Instance.new("Frame")
Frame.Parent = ScreenGui
Frame.Size = UDim2.new(0, 300, 0, 100)
Frame.Position = UDim2.new(0.5, -150, 0.5, -50)
Frame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)

local FrameCorner = Instance.new("UICorner")
FrameCorner.CornerRadius = UDim.new(0, 10)
FrameCorner.Parent = Frame

-- ===== Шапка =====
local Header = Instance.new("Frame")
Header.Parent = Frame
Header.Size = UDim2.new(1, 0, 0, 30)
Header.BackgroundTransparency = 1
Header.Name = "Header"

local Title = Instance.new("TextLabel")
Title.Parent = Header
Title.Text = "TradeLock v.1.7"
Title.Font = Enum.Font.GothamBold
Title.TextSize = 16
Title.TextColor3 = Color3.fromRGB(255, 255, 255)
Title.BackgroundTransparency = 1
Title.Position = UDim2.new(0, 10, 0, 5)
Title.Size = UDim2.new(0, 150, 0, 20)
Title.TextXAlignment = Enum.TextXAlignment.Left

local SettingsButton = Instance.new("ImageButton")
SettingsButton.Parent = Header
SettingsButton.Size = UDim2.new(0, 20, 0, 20)
SettingsButton.Position = UDim2.new(1, -50, 0, 5)
SettingsButton.BackgroundTransparency = 1
SettingsButton.Image = "rbxassetid://6031280882"

local CloseButton = Instance.new("ImageButton")
CloseButton.Parent = Header
CloseButton.Size = UDim2.new(0, 20, 0, 20)
CloseButton.Position = UDim2.new(1, -25, 0, 5)
CloseButton.BackgroundTransparency = 1
CloseButton.Image = "rbxassetid://6031094678"

-- ===== Loading bar =====
local LoadingBar = Instance.new("Frame")
LoadingBar.Parent = Frame
LoadingBar.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
LoadingBar.Position = UDim2.new(0, 0, 1, -20)
LoadingBar.Size = UDim2.new(0, 0, 0, 20)

local BarCorner = Instance.new("UICorner")
BarCorner.Parent = LoadingBar
BarCorner.CornerRadius = UDim.new(0, 10)

-- ===== DarkTrade кнопка =====
local DarkTradeButton = Instance.new("TextButton")
DarkTradeButton.Name = "DarkTradeButton"
DarkTradeButton.Parent = ScreenGui
DarkTradeButton.Size = UDim2.new(0, 100, 0, 35)
DarkTradeButton.Position = UDim2.new(1, -110, 0, 10)
DarkTradeButton.BackgroundTransparency = 0.2
DarkTradeButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
DarkTradeButton.Text = "DarkTrade"
DarkTradeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
DarkTradeButton.TextSize = 16
DarkTradeButton.Font = Enum.Font.GothamBold
DarkTradeButton.Visible = false

local DarkTradeCorner = Instance.new("UICorner")
DarkTradeCorner.CornerRadius = UDim.new(0, 8)
DarkTradeCorner.Parent = DarkTradeButton

-- ===== TradeLag toggle =====
local TradeLagButton = Instance.new("TextButton")
TradeLagButton.Parent = Frame
TradeLagButton.Size = UDim2.new(0, 60, 0, 30)
TradeLagButton.Position = UDim2.new(0, 10, 0, 40)
TradeLagButton.Font = Enum.Font.GothamBold
TradeLagButton.TextSize = 14
TradeLagButton.TextColor3 = Color3.fromRGB(255, 255, 255)
TradeLagButton.BackgroundColor3 = Color3.fromRGB(200, 0, 0)
TradeLagButton.Text = "OFF"
TradeLagButton.Visible = false

local ToggleCorner = Instance.new("UICorner")
ToggleCorner.CornerRadius = UDim.new(0, 8)
ToggleCorner.Parent = TradeLagButton

local TradeLagLabel = Instance.new("TextLabel")
TradeLagLabel.Parent = Frame
TradeLagLabel.Size = UDim2.new(0, 70, 0, 30)
TradeLagLabel.Position = UDim2.new(0, 80, 0, 40)
TradeLagLabel.BackgroundTransparency = 1
TradeLagLabel.Text = "TradeLag"
TradeLagLabel.Font = Enum.Font.GothamBold
TradeLagLabel.TextSize = 16
TradeLagLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
TradeLagLabel.Visible = false

-- ===== Состояния =====
local toggled = false
local savedPosition = Frame.Position

-- Попытка загрузить конфиг из файла
local config = readConfig()
if config then
    if config.Position then
        savedPosition = UDim2.new(config.Position.X.Scale, config.Position.X.Offset, config.Position.Y.Scale, config.Position.Y.Offset)
    end
    if config.TradeLagToggled ~= nil then
        toggled = config.TradeLagToggled
    end
    -- Применяем сохранённое положение сразу
    Frame.Position = savedPosition
end

local function UpdateTradeLagButton()
    if toggled then
        TradeLagButton.BackgroundColor3 = Color3.fromRGB(0, 200, 0)
        TradeLagButton.Text = "ON"
    else
        TradeLagButton.BackgroundColor3 = Color3.fromRGB(200, 0, 0)
        TradeLagButton.Text = "OFF"
    end
end

TradeLagButton.MouseButton1Click:Connect(function()
    toggled = not toggled
    UpdateTradeLagButton()
    -- Сохраняем состояние в файл
    writeConfig({
        Position = {
            X = {Scale = Frame.Position.X.Scale, Offset = Frame.Position.X.Offset},
            Y = {Scale = Frame.Position.Y.Scale, Offset = Frame.Position.Y.Offset},
        },
        TradeLagToggled = toggled
    })
end)

-- ===== Анимации =====
local function ShowFrame()
    Frame.Position = savedPosition
    Frame.Visible = true
    Frame.Size = UDim2.new(0, 0, 0, 100)
    TweenService:Create(Frame, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {Size = UDim2.new(0, 300, 0, 100)}):Play()
end

local function HideFrame()
    savedPosition = Frame.Position
    local tween = TweenService:Create(Frame, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {Size = UDim2.new(0, 0, 0, 100)})
    tween.Completed:Connect(function()
        Frame.Visible = false
        -- Сохраняем позицию и состояние при закрытии
        writeConfig({
            Position = {
                X = {Scale = savedPosition.X.Scale, Offset = savedPosition.X.Offset},
                Y = {Scale = savedPosition.Y.Scale, Offset = savedPosition.Y.Offset},
            },
            TradeLagToggled = toggled
        })
    end)
    tween:Play()
end

-- ===== Логика кнопок =====
CloseButton.MouseButton1Click:Connect(function()
    HideFrame()
    DarkTradeButton.Visible = true
end)

DarkTradeButton.MouseButton1Click:Connect(function()
    DarkTradeButton.Visible = false
    ShowFrame()
end)

SettingsButton.MouseButton1Click:Connect(function()
    print("Settings clicked")
end)

-- ===== Загрузка и показ кнопок =====
local tweenInfo = TweenInfo.new(6, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)
local goal = {Size = UDim2.new(1, 0, 0, 20)}
local tween = TweenService:Create(LoadingBar, tweenInfo, goal)
tween:Play()

tween.Completed:Connect(function()
    LoadingBar.Visible = false
    TradeLagButton.Visible = true
    TradeLagLabel.Visible = true
    UpdateTradeLagButton()
end)

-- ===== Перетаскивание только за шапку =====
local dragging
local dragInput
local dragStart
local startPos

local function update(input)
    local delta = input.Position - dragStart
    Frame.Position = UDim2.new(
        startPos.X.Scale,
        startPos.X.Offset + delta.X,
        startPos.Y.Scale,
        startPos.Y.Offset + delta.Y
    )
end

Header.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1
```
